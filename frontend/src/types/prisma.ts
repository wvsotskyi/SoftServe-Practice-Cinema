// TODO make types autogenerated from @prisma/client
// not recommended to use currently, may not reflect actual api responses
export type User = {
    id: number;
    email: string;
    password?: never;
    name: string | null;
    role: Role;
    createdAt: Date;
    updatedAt: Date;
};

export type Session = {
    id: string;
    userId: number;
    createdAt: Date;
    expiresAt: Date;
};

export type RefreshToken = {
    id: string;
    userId: number;
    token: string;
    expiresAt: Date;
    createdAt: Date;
};

export type Movie = {
    id: number;
    tmdbId: number;
    imdbId: number;
    title: string;
    originalTitle: string;
    originalLanguage: string;
    overview: string;
    posterPath: string | null;
    backdropPath: string | null;
    releaseDate: Date | null;
    productionCountries: string[];
    runtime: number | null;
    budget: number | null;
    revenue: number | null;
    trailerKey: string | null;
    voteAverage: number | null;
    voteCount: number | null;
    adult: boolean;
    status: MovieStatus | null;
    createdAt: Date;
    updatedAt: Date;
};

export type Genre = {
    id: number;
    name: string;
};

export type Cast = {
    id: number;
    movieId: number;
    tmdbId: number;
    name: string;
    character: string;
    profilePath: string | null;
    order: number;
};

export type Hall = {
    id: number;
    name: string;
};

export type Seat = {
    id: number;
    row: number;
    number: number;
    hallId: number;
};

export type Showtime = {
    id: number;
    movieId: number;
    hallId: number;
    time: Date;
    price: number;
};

export type Booking = {
    id: number;
    userId: number;
    showtimeId: number;
    totalPrice: number;
    status: BookingStatus;
    createdAt: Date;
};

export type Favorite = {
    userId: number;
    movieId: number;
    createdAt: Date;
};

// Relation types (for frontend usage)
export type MovieWithRelations = Movie & {
    genres: Genre[];
    cast: Cast[];
};

export type ShowtimeWithRelations = Showtime & {
    movie: Movie;
    hall: Hall;
};

export type BookingWithRelations = Booking & {
    user: Pick<User, 'id' | 'email' | 'name'>;
    showtime: ShowtimeWithRelations;
    seats: Seat[];
};

// Enums
export enum Role {
    USER = 'USER',
    ADMIN = 'ADMIN',
}

export enum BookingStatus {
    CONFIRMED = 'CONFIRMED',
    CANCELLED = 'CANCELLED',
    COMPLETED = 'COMPLETED',
}

export enum MovieStatus {
    RELEASED = 'RELEASED',
    UPCOMING = 'UPCOMING',
    IN_PRODUCTION = 'IN_PRODUCTION',
}
